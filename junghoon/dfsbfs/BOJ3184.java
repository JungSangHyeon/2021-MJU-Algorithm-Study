package dfsbfs;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class BOJ3184 {
	/* 양
	 * 
	 * 문제: 미키의 뒷마당에는 특정 수의 양이 있다. 
	 *      그가 푹 잠든 사이에 배고픈 늑대는 마당에 들어와 양을 공격했다.
	 *      마당은 행과 열로 이루어진 직사각형 모양이다. 
	 *      글자 '.' (점)은 빈 필드를 의미하며, 글자 '#'는 울타리를, 'o'는 양, 'v'는 늑대를 의미한다.
	 *      한 칸에서 수평, 수직만으로 이동하며 울타리를 지나지 않고 다른 칸으로 이동할 수 있다면, 두 칸은 같은 영역 안에 속해 있다고 한다. 
	 *      마당에서 "탈출"할 수 있는 칸은 어떤 영역에도 속하지 않는다고 간주한다.
	 *      다행히 우리의 양은 늑대에게 싸움을 걸 수 있고 영역 안의 양의 수가 늑대의 수보다 많다면 이기고, 늑대를 우리에서 쫓아낸다. 
	 *      그렇지 않다면 늑대가 그 지역 안의 모든 양을 먹는다.
	 *      맨 처음 모든 양과 늑대는 마당 안 영역에 존재한다.
	 *      아침이 도달했을 때 살아남은 양과 늑대의 수를 출력하는 프로그램을 작성하라.
	 * 
	 * 입력: 첫 줄에는 두 정수 R과 C가 주어지며(3 ≤ R, C ≤ 250), 각 수는 마당의 행과 열의 수를 의미한다.
	 *      다음 R개의 줄은 C개의 글자를 가진다. 이들은 마당의 구조(울타리, 양, 늑대의 위치)를 의미한다.
	 * 
	 * 출력: 하나의 줄에 아침까지 살아있는 양과 늑대의 수를 의미하는 두 정수를 출력한다.
	 * 
	 * 풀이: 맨 처음 보든 양과 늑대는 마당안의 영역에 존재 -> 하지만 조건이 없으니 마당 안의 영역에 존재하지 않을 수 있다 -> 탐생 중 마당의 영역 밖으로 나가게 될 때를 구분해주는 구현이 필요
	 *      방문하지 않았으면 서, 양과 늑대가 있는 dfs 탐색 -> 가려고 하는 위치가 마당을 벗어나지 않으며 울타리가 아니고 방문하지 않을 경우에 탐색을 계속 -> 종류 후 양과 늑대의 개수를 비교
	 *     
	 * */

	static int r, c;
	static String[] s;
	static boolean[][] visit;
	static int[][] dir = {{1, 0}, {0, 1}, {-1, 0}, {0, -1}};
	static int sheep;  
	static int wolf; 

	static void input() throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		
		r = Integer.parseInt(st.nextToken());
		c = Integer.parseInt(st.nextToken());
		s = new String[r];
		
		for (int i = 0; i < r; i++)
			s[i] = br.readLine();
		visit = new boolean[r][c];
	}

	static void dfs(int x, int y) {
		
		visit[x][y] = true;
		char cc = s[x].charAt(y);
		
		if(cc == 'v') wolf++;
		if(cc == 'o') sheep++;

		for (int k = 0; k < 4; k++) {
			
			int nx = x + dir[k][0];
			int ny = y + dir[k][1];

			if(nx < 0 || ny < 0 || nx >= r || ny >= c) continue;
			
			if(visit[nx][ny]) continue;
			char c = s[nx].charAt(ny);
			if(c == '#') continue;

			dfs(nx, ny);

		}

	}

	static void process() {
		int wo = 0;
		int sh = 0;
		for (int i = 0; i < r; i++) {
			for (int j = 0; j < c; j++) {
				char c = s[i].charAt(j);
				if (!visit[i][j] && (c != '#')) {
					sheep = 0;
					wolf = 0;
					dfs(i, j);
					if(sheep > wolf) wolf = 0;
					else sheep = 0;
					wo += wolf;
					sh += sheep;
				}
			}
		}
		System.out.println(sh + " " + wo);
	}

	public static void main(String[] args) throws IOException {
		input();
		process();
	}

}
